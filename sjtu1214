#include <iostream>
#include <stack>
#include <queue>
using namespace std;
 
class binaryTree
{
    private:
         struct node
            {
                int data;
                node *leftChild,*rightBrother;
                node():data(0),leftChild(NULL),rightBrother(NULL){}
                node(int i):data(i){}
                ~node(){}
            };
         struct stnode
         {
             node *n;
             int timesPop;
             stnode(node *x=NULL):n(x),timesPop(0) {}
         };
         node *root;
         node *array[100001];
         bool flag[100001];
         queue<node *> q1;
         queue<node *> q2;
    public:
         binaryTree(int n);
         ~binaryTree(){};
         void preOrder();
         void postOrder();
         void levelOrder();
};
 
binaryTree::binaryTree(int n)
{
    array[0]=NULL;flag[0]=true;
    int a,b,c;
    for (int i=1;i<n+1;++i)
        {array[i]=new node();
        flag[i]=true;}
    for (int i=1;i<n+1;++i)
    {
        cin>>a>>b>>c;
        array[i]->leftChild=array[a];
        array[i]->rightBrother=array[b];
        array[i]->data=c;
        flag[a]=false;
        flag[b]=false;
    }
    for (int i=1;i<n+1;++i)
         if (flag[i]) root=array[i];
}
void binaryTree::preOrder()
{
    stack<node *> s;
    if (!root) return;
    s.push(root);
    node *temp;
    while(!s.empty())
        {   
            temp=s.top();
            s.pop();
            cout<<temp->data<<" ";
            if (temp->rightBrother) s.push(temp->rightBrother);
            if (temp->leftChild) s.push(temp->leftChild);
        }
}
void binaryTree::postOrder()
{
    stack<stnode> s;
    if (!root) return;
    stnode current(root);
    s.push(current);
    while(!s.empty())
        {
           current=s.top();
            s.pop();
            if (++current.timesPop==2)
            {
                cout<<current.n->data<<" ";
                if (current.n->rightBrother) s.push(stnode(current.n->rightBrother));
            }
            else
            {
                s.push(current);
                if (current.n->leftChild) s.push(stnode(current.n->leftChild));
 
            }
        }
 
}
void binaryTree::levelOrder()
{
 
     if(root) q1.push(root);
     node *temp;
     node *Temp;
     while (!q1.empty())
        {
            temp=q1.front();
            while (temp)
            {
                cout<<temp->data<<" ";
                q1.pop();
                Temp=temp->leftChild;
                while(Temp)
                    {
                        q2.push(Temp);
                        Temp=Temp->rightBrother;
                    }
                if(!q1.empty()) temp=q1.front();
                else temp=NULL;
                
            } 
            while (!q2.empty())
                {
                    q1.push(q2.front());
                    q2.pop();
                }
            
        }
}
 
int main()
{
    int N;
    cin>>N;
    binaryTree T(N);
    T.preOrder();
    cout<<endl;
    T.postOrder();
    cout<<endl;
    T.levelOrder();
}
